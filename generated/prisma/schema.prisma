// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid()) // Primary key for relations
  walletAddress String   @unique // From Mongoose User, main business identifier
  username      String? // From Mongoose User
  profilePicUrl String? // From Mongoose User
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  wallets       Wallet[]
  chats         Chat[] // Relation to Chat model
}

model Wallet {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  address      String        @unique
  type         String // e.g., "EOA", "SmartContract"
  blockchain   String // e.g., "Ethereum", "Solana"
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assets       WalletAsset[]
  transactions Transaction[]
  aiSettings   Json? // For AI-specific configurations
}

model Asset {
  id              String        @id @default(cuid())
  symbol          String // e.g., "ETH", "BTC"
  name            String // e.g., "Ethereum", "Bitcoin"
  contractAddress String? // For token contracts, unique per blockchain
  blockchain      String // e.g., "Ethereum", "Solana"
  decimals        Int
  logoUrl         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  walletAssets    WalletAsset[]
  transactions    Transaction[]

  @@unique([symbol, blockchain])
  @@unique([contractAddress, blockchain])
}

model WalletAsset {
  id           String   @id @default(cuid())
  walletId     String
  wallet       Wallet   @relation(fields: [walletId], references: [id])
  assetId      String
  asset        Asset    @relation(fields: [assetId], references: [id])
  balance      Decimal
  lastSyncedAt DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([walletId, assetId])
}

model Transaction {
  id          String   @id @default(cuid())
  hash        String // Unique per blockchain
  walletId    String // Link to internal wallet
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  fromAddress String
  toAddress   String
  assetId     String
  asset       Asset    @relation(fields: [assetId], references: [id])
  amount      Decimal
  blockchain  String
  status      String // e.g., "Pending", "Confirmed", "Failed"
  timestamp   DateTime // Blockchain timestamp
  fee         Decimal?
  metadata    Json? // For AI insights, categorization, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([hash, blockchain])
}

model Chat {
  id           String    @id @default(cuid()) // Auto-generated CUID by Prisma
  clientChatId String    @unique // Client-provided unique ID for the chat
  title        String
  user         User      @relation(fields: [userId], references: [id]) // Link to User.id (CUID)
  userId       String // Stores the User.id (CUID)
  messages     Message[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([userId]) // Index for querying chats by user
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

model Message {
  id              String      @id @default(cuid())
  clientMessageId String      @unique // Client-provided unique ID for the message
  chat            Chat        @relation(fields: [chatId], references: [id])
  chatId          String
  role            MessageRole
  parts           Json // Example: [{ "type": "text", "text": "Hello world" }]
  attachments     Json? // Example: [{ "url": "...", "name": "...", "contentType": "..." }]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([chatId]) // Index for querying messages by chat
}
